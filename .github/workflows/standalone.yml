name: Standalone Build

on:
  workflow_call:

env:
  DOTNET_VERSION: 7.0.x
  UNIX_DIST_DIR: /tmp/dist
  UNIX_OUTPUT_DIR: /tmp/out
  WIN_DIST_DIR: c:/tmp/dist
  WIN_OUTPUT_DIR: c:/tmp/out

jobs:
  osx-pack:
    name: MacOS x64/arm64
    runs-on: macos-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Nerdbank.GitVersioning
      uses: dotnet/nbgv@v0.4.1
      id: nbgv

    - name: Build (osx-x64)
      run: |
        dotnet publish ./src/neoxp \
        --framework net7.0 \
        --configuration Release \
        --runtime osx-x64 \
        --self-contained true \
        --output ${{ env.UNIX_OUTPUT_DIR }}/osx-x64 \
        --verbosity normal \
        -p:RuntimeIdentifier=osx-x64 \
        -p:SelfContained=true \
        -p:IncludeNativeLibrariesForSelfExtract=false \
        -p:PublishTrimmed=false \
        -p:PublishSingleFile=true \
        -p:PublishReadyToRun=true \
        -p:PublishReadyToRunComposite=true \
        -p:EnableCompressionInSingleFile=true \
        -p:DebugType=embedded \
        -p:ServerGarbageCollection=true

    - name: Build (osx-arm64)
      run: |
        dotnet publish ./src/neoxp \
        --framework net7.0 \
        --configuration Release \
        --runtime osx-arm64 \
        --self-contained true \
        --output ${{ env.UNIX_OUTPUT_DIR }}/osx-arm64 \
        --verbosity normal \
        -p:RuntimeIdentifier=osx-arm64 \
        -p:SelfContained=true \
        -p:IncludeNativeLibrariesForSelfExtract=false \
        -p:PublishTrimmed=false \
        -p:PublishSingleFile=true \
        -p:PublishReadyToRun=true \
        -p:PublishReadyToRunComposite=true \
        -p:EnableCompressionInSingleFile=true \
        -p:DebugType=embedded \
        -p:ServerGarbageCollection=true

    - name: Create Distribution Directory
      run: |
        mkdir -p ${{ env.UNIX_DIST_DIR }}

    - name: Tarball (osx-x64)
      working-directory: ${{ env.UNIX_OUTPUT_DIR }}/osx-x64
      env:
        TAR_FILE: ${{ format('{0}/Neo.Express-osx-x64-{1}.tar.xz', env.UNIX_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        tar cJf ${{ env.TAR_FILE }} .

    - name: Tarball (osx-arm64)
      working-directory: ${{ env.UNIX_OUTPUT_DIR }}/osx-arm64
      env:
        TAR_FILE: ${{ format('{0}/Neo.Express-osx-arm64-{1}.tar.xz', env.UNIX_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        tar cJf ${{ env.TAR_FILE }} .

    - name: Generate SHA256 File (osx-x64)
      working-directory: ${{ env.UNIX_DIST_DIR }}
      env:
        TAR_FILE: ${{ format('Neo.Express-osx-x64-{0}.tar.xz', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        shasum --algorithm 256 ${{ env.TAR_FILE }} > ${{ env.TAR_FILE }}.sha256

    - name: Generate SHA256 File (osx-arm64)
      working-directory: ${{ env.UNIX_DIST_DIR }}
      env:
        TAR_FILE: ${{ format('Neo.Express-osx-arm64-{0}.tar.xz', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        shasum --algorithm 256 ${{ env.TAR_FILE }} > ${{ env.TAR_FILE }}.sha256

    - name: Upload Tarballs (Standalone)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.nbgv.outputs.NuGetPackageVersion }}
        path: |
          ${{ env.UNIX_DIST_DIR }}/*

  linux-pack:
    name: Linux x64/arm64
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Nerdbank.GitVersioning
      uses: dotnet/nbgv@v0.4.1
      id: nbgv

    - name: Build (linux-x64)
      run: |
        dotnet publish ./src/neoxp \
        --framework net7.0 \
        --configuration Release \
        --runtime linux-x64 \
        --self-contained true \
        --output ${{ env.UNIX_OUTPUT_DIR }}/linux-x64 \
        --verbosity normal \
        -p:RuntimeIdentifier=linux-x64 \
        -p:SelfContained=true \
        -p:IncludeNativeLibrariesForSelfExtract=false \
        -p:PublishTrimmed=false \
        -p:PublishSingleFile=true \
        -p:PublishReadyToRun=true \
        -p:EnableCompressionInSingleFile=true \
        -p:DebugType=embedded \
        -p:ServerGarbageCollection=true

    - name: Build (linux-arm64)
      run: |
        dotnet publish ./src/neoxp \
        --framework net7.0 \
        --configuration Release \
        --runtime linux-arm64 \
        --self-contained true \
        --output ${{ env.UNIX_OUTPUT_DIR }}/linux-arm64 \
        --verbosity normal \
        -p:RuntimeIdentifier=linux-arm64 \
        -p:SelfContained=true \
        -p:IncludeNativeLibrariesForSelfExtract=false \
        -p:PublishTrimmed=false \
        -p:PublishSingleFile=true \
        -p:PublishReadyToRun=true \
        -p:EnableCompressionInSingleFile=true \
        -p:DebugType=embedded \
        -p:ServerGarbageCollection=true

    - name: Build (linux-musl-arm64)
      run: |
        dotnet publish ./src/neoxp \
        --framework net7.0 \
        --configuration Release \
        --runtime linux-musl-arm64 \
        --self-contained true \
        --output ${{ env.UNIX_OUTPUT_DIR }}/linux-musl-arm64 \
        --verbosity normal \
        -p:RuntimeIdentifier=linux-musl-arm64 \
        -p:SelfContained=true \
        -p:IncludeNativeLibrariesForSelfExtract=false \
        -p:PublishTrimmed=false \
        -p:PublishSingleFile=true \
        -p:PublishReadyToRun=true \
        -p:EnableCompressionInSingleFile=true \
        -p:DebugType=embedded \
        -p:ServerGarbageCollection=true

    - name: Create Distribution Directory
      run: |
        mkdir -p ${{ env.UNIX_DIST_DIR }}

    - name: Tarball (linux-x64)
      working-directory: ${{ env.UNIX_OUTPUT_DIR }}/linux-x64
      env:
        TAR_FILE: ${{ format('{0}/Neo.Express-linux-x64-{1}.tar.gz', env.UNIX_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        tar -czvf ${{ env.TAR_FILE }} .

    - name: Tarball (linux-arm64)
      working-directory: ${{ env.UNIX_OUTPUT_DIR }}/linux-arm64
      env:
        TAR_FILE: ${{ format('{0}/Neo.Express-linux-arm64-{1}.tar.gz', env.UNIX_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        tar -czvf ${{ env.TAR_FILE }} .

    - name: Tarball (linux-musl-arm64)
      working-directory: ${{ env.UNIX_OUTPUT_DIR }}/linux-musl-arm64
      env:
        TAR_FILE: ${{ format('{0}/Neo.Express-linux-musl-arm64-{1}.tar.gz', env.UNIX_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        tar -czvf ${{ env.TAR_FILE }} .

    - name: Generate SHA256 File (linux-x64)
      working-directory: ${{ env.UNIX_DIST_DIR }}
      env:
        TAR_FILE: ${{ format('Neo.Express-linux-x64-{0}.tar.gz', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        sha256sum ${{ env.TAR_FILE }} > ${{ env.TAR_FILE }}.sha256

    - name: Generate SHA256 File (linux-arm64)
      working-directory: ${{ env.UNIX_DIST_DIR }}
      env:
        TAR_FILE: ${{ format('Neo.Express-linux-arm64-{0}.tar.gz', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        sha256sum ${{ env.TAR_FILE }} > ${{ env.TAR_FILE }}.sha256

    - name: Generate SHA256 File (linux-musl-arm64)
      working-directory: ${{ env.UNIX_DIST_DIR }}
      env:
        TAR_FILE: ${{ format('Neo.Express-linux-musl-arm64-{0}.tar.gz', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        sha256sum ${{ env.TAR_FILE }} > ${{ env.TAR_FILE }}.sha256

    - name: Upload Tarballs (Standalone)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.nbgv.outputs.NuGetPackageVersion }}
        path: |
          ${{ env.UNIX_DIST_DIR }}/*

  win-pack:
    name: Windows x64/arm64
    runs-on: windows-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Nerdbank.GitVersioning
      uses: dotnet/nbgv@v0.4.1
      id: nbgv

    - name: Build (win-x64)
      run: |
        dotnet publish ./src/neoxp `
        --framework net7.0 `
        --configuration Release `
        --runtime win-x64 `
        --self-contained true `
        --output ${{ env.WIN_OUTPUT_DIR }}/win-x64 `
        --verbosity normal `
        -p:RuntimeIdentifier=win-x64 `
        -p:SelfContained=true `
        -p:IncludeNativeLibrariesForSelfExtract=false `
        -p:PublishTrimmed=false `
        -p:PublishSingleFile=true `
        -p:PublishReadyToRun=true `
        -p:EnableCompressionInSingleFile=true `
        -p:DebugType=embedded `
        -p:ServerGarbageCollection=true

    - name: Build (win-arm64)
      run: |
        dotnet publish ./src/neoxp `
        --framework net7.0 `
        --configuration Release `
        --runtime win-arm64 `
        --self-contained true `
        --output ${{ env.WIN_OUTPUT_DIR }}/win-arm64 `
        --verbosity normal `
        -p:RuntimeIdentifier=win-arm64 `
        -p:SelfContained=true `
        -p:IncludeNativeLibrariesForSelfExtract=false `
        -p:PublishTrimmed=false `
        -p:PublishSingleFile=true `
        -p:PublishReadyToRun=true `
        -p:EnableCompressionInSingleFile=true `
        -p:DebugType=embedded `
        -p:ServerGarbageCollection=true

    - name: Build (portable)
      run: |
        dotnet publish ./src/neoxp `
        --framework net7.0 `
        --configuration Release `
        --output ${{ env.WIN_OUTPUT_DIR }}/portable `
        --verbosity normal

    - name: Create Distribution Directory
      run: |
        mkdir -p ${{ env.WIN_DIST_DIR }}

    - name: Zip (win-x64)
      working-directory: ${{ env.WIN_OUTPUT_DIR }}/win-x64
      env:
        ZIP_FILE: ${{ format('{0}/Neo.Express-win-x64-{1}.zip', env.WIN_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        Compress-Archive -Path * -Destination ${{ env.ZIP_FILE }}

    - name: Zip (win-arm64)
      working-directory: ${{ env.WIN_OUTPUT_DIR }}/win-arm64
      env:
        ZIP_FILE: ${{ format('{0}/Neo.Express-win-arm64-{1}.zip', env.WIN_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        Compress-Archive -Path * -Destination ${{ env.ZIP_FILE }}

    - name: Zip (portable)
      working-directory: ${{ env.WIN_OUTPUT_DIR }}/portable
      env:
        ZIP_FILE: ${{ format('{0}/Neo.Express-portable-{1}.zip', env.WIN_DIST_DIR, steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        Compress-Archive -Path * -Destination ${{ env.ZIP_FILE }}

    - name: Generate SHA256 File (win-x64)
      working-directory: ${{ env.WIN_DIST_DIR }}
      env:
        ZIP_FILE: ${{ format('Neo.Express-win-x64-{0}.zip', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        $zipHash = Get-FileHash -Path ${{ env.ZIP_FILE }} -Algorithm SHA256
        $zipHash.Hash | Out-File -Encoding UTF8 ${{ env.ZIP_FILE }}.sha256

    - name: Generate SHA256 File (win-arm64)
      working-directory: ${{ env.WIN_DIST_DIR }}
      env:
        ZIP_FILE: ${{ format('Neo.Express-win-arm64-{0}.zip', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        $zipHash = Get-FileHash -Path ${{ env.ZIP_FILE }} -Algorithm SHA256
        $zipHash.Hash | Out-File -Encoding UTF8 ${{ env.ZIP_FILE }}.sha256

    - name: Generate SHA256 File (portable)
      working-directory: ${{ env.WIN_DIST_DIR }}
      env:
        ZIP_FILE: ${{ format('Neo.Express-portable-{0}.zip', steps.nbgv.outputs.NuGetPackageVersion) }}
      run: |
        $zipHash = Get-FileHash -Path ${{ env.ZIP_FILE }} -Algorithm SHA256
        $zipHash.Hash | Out-File -Encoding UTF8 ${{ env.ZIP_FILE }}.sha256

    - name: Upload Zips (Standalone)
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.nbgv.outputs.NuGetPackageVersion }}
        path: |
          ${{ env.WIN_DIST_DIR }}/*
